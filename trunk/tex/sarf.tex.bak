%
% File naaclhlt2010.tex
%
% Contact: nasmith@cs.cmu.edu

\documentclass[11pt,letterpaper]{article}
\usepackage{naaclhlt2010}
\usepackage{times}
\usepackage{latexsym}
\setlength\titlebox{6.5cm}    % Expanding the titlebox

%\title{Instructions for NAACL HLT 2010 Proceedings\Thanks{This...}}
\title{Case based Arabic Morphological Analysis with 
    Compositional Non-deterministic Automata }

\author{Hamza Harkous \\
  \And
  Jad Makhlouta \\
  American University of Beirut \\
  {\tt \{hhh20, jem04, fz11\}@aub.edu.lb }
  \And 
      Fadi Zaraket 
}

\date{}

\begin{document}
\maketitle
\begin{abstract}
  Morphological analysis is key in current automated analysis techniques 
  for Arabic text. 
  Current morphological analyzers take an Arabic word as input and 
  enumerate all possible morphological solutions (stems or 
  derivations) using concatenation based analysis.
  The solutions suffer from accuracy due to the inherent difficulties
  of morphological analysis of the Arabic language. 
  The enumeration of all possible solutions may also hurt the performance
  in cases where not all solutions are needed.
  In this paper, we present a novel efficient morphological analyzer that 
  uses parallel compositional non-deterministic Automata 
  driven by a case based controller.
  The analyzer keeps alive possible analyses of the text 
  for the controller to intervene with a decision and thus 
  reduce false positives on case basis.

  Our concatenative analysis uses recursive affixes in order to
  retain better part of speech information and enhance the 
  efficiency of affix matching. 
  The analyzer takes as input a character from a full text stream 
  rather than a sequence of words and thus performs tokenization
  on the fly and based on morphological correctness. 
  This relieves the user from preprocessing the text and provides
  a more exact tokenization than delimiter based tokenization. 
  This is important for Arabic since two words can occur in a text
  without a delimiter in between.

  We used our analyzer to successfully automate the analysis of 
  three books of Islamic literature where we segmented each book
  into several narrations. In each narration, we detected 
  a chain of narrators, where each narrator is a complex sequence of
  proper names seperated with name connector phrases. 
  This is a collection of chain of narrator structures where each
  chain is a structure with three levels of hierarchy.
  Our results show better accuracy and higher efficiency than current 
  morphological analyzers. 
\end{abstract}

\section{Introduction}


\subsection{Contributions}
% does not have to be a subsection, 
%just to highlight it as an item we should not miss


% paper structure


\section{Background}

\section{Related Work }

\section{Sarf}

\subsection{Recursive Affixes}
% smaller FSM
% retain POS info

\subsection{Motivating Example}
% the FSMs for the three words

\subsection{Affix Linear FSM}

\subsection{Stem Linear FSM}

\subsection{Non-deterministic Composition of FSMs}
% algorithm
% diagram of abstract machines

\section{Islamic Literature Case Study}

\subsection{Hadith Segmentation}

\subsection{Chain of Narrators} 

\subsection{Controller}
% FSM for the controller


\section{Results}
\label{sec:results}

\subsection{Efficiency Comparison Against Buckwalter and SAMA}

\subsection{Case Study Accuracy and Efficiency Results}

% accuracy measure:
% on names: a word is a name or not
% chains: narrator is missing from a chain
% segmentation: two hadiths are merged

\section{Future Work}

%For reasons of uniformity, Adobe's {\bf Times Roman} font should be
%used. In \LaTeX2e{} this is accomplished by putting

%\begin{quote}
%\begin{verbatim}
%\usepackage{times}
%\usepackage{latexsym}
%\end{verbatim}
%\end{quote}
%in the preamble.

%Additionally, it is of utmost importance to specify the {\bf
%  US-Letter format} (8.5in $\times$ 11in) when formatting the paper.
%When working with {\tt dvips}, for instance, one should specify {\tt
%  -t letter}.

%{\bf Citations}: Citations within the text appear
%in parentheses as~\cite{Gusfield:97} or, if the author's name appears in
%the text itself, as Gusfield~\shortcite{Gusfield:97}. 
%Append lowercase letters to the year in cases of ambiguities.  
%Treat double authors as in~\cite{Aho:72}, but write as 
%in~\cite{Chandra:81} when more than two authors are involved. 
%Collapse multiple citations as in~\cite{Gusfield:97,Aho:72}.


\section*{Acknowledgments}


\begin{thebibliography}{}

\bibitem[\protect\citename{Aho and Ullman}1972]{Aho:72}
Alfred~V. Aho and Jeffrey~D. Ullman.
\newblock 1972.
\newblock {\em The Theory of Parsing, Translation and Compiling}, volume~1.
\newblock Prentice-{Hall}, Englewood Cliffs, NJ.

%\bibitem[\protect\citename{{American Psychological Association}}1983]{APA:83}
%{American Psychological Association}.
%\newblock 1983.
%\newblock {\em Publications Manual}.
%\newblock American Psychological Association, Washington, DC.
%
%\bibitem[\protect\citename{{Association for Computing Machinery}}1983]{ACM:83}
%{Association for Computing Machinery}.
%\newblock 1983.
%\newblock {\em Computing Reviews}, 24(11):503--512.
%
%\bibitem[\protect\citename{Chandra \bgroup et al.\egroup }1981]{Chandra:81}
%Ashok~K. Chandra, Dexter~C. Kozen, and Larry~J. Stockmeyer.
%\newblock 1981.
%\newblock Alternation.
%\newblock {\em Journal of the Association for Computing Machinery},
%  28(1):114--133.
%
%\bibitem[\protect\citename{Gusfield}1997]{Gusfield:97}
%Dan Gusfield.
%\newblock 1997.
%\newblock {\em Algorithms on Strings, Trees and Sequences}.
%\newblock Cambridge University Press, Cambridge, UK.

\end{thebibliography}

\end{document}
